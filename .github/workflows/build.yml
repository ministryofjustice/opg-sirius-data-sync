name: Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  actions: read
  checks: read
  contents: write
  deployments: none
  issues: none
  packages: none
  pull-requests: write
  repository-projects: none
  security-events: write
  statuses: none

defaults:
 run:
  shell: bash

jobs:
  create-tag:
    name: Create Tags
    uses: ./.github/workflows/create-tags.yml

  build:
    name: Build Image
    uses: ministryofjustice/opg-github-workflows/.github/workflows/build-multi-architecture-image.yml@27a0f72b83c6b026fa4131230289bfbed9049cc7 # v3.15.0
    with:
      image_name: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/data-sync
  
  push:
    name: Test & Publish Image
    runs-on: ubuntu-latest
    needs: [create-tag, build]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker
        run: |
          echo '{"experimental": true, "features": { "containerd-snapshotter": true }}' | sudo tee -a /etc/docker/daemon.json
          sudo systemctl restart docker
          docker run --privileged --rm tonistiigi/binfmt --install all
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: /tmp/images
          name: multi-arch-image
      - name: Load Image
        run: |
          docker load -i /tmp/images/multi-arch-image.tar

      # - name: Trivy Image Vulnerability Scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 311462405659.dkr.ecr.eu-west-1.amazonaws.com/sirius/data-sync:latest
      #     severity: 'MEDIUM,HIGH,CRITICAL'
      #     format: 'template'
      #     template: '@/contrib/sarif.tpl'
      #     output: 'trivy-results.sarif'
      #     exit-code: '1'
      #     ignore-unfixed: true

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@4e828ff8d448a8a6e532957b1811f387a63867e8 # v3.29.4
      #   if: always()
      #   with:
      #     sarif_file: 'trivy-results.sarif'

      # - name: Install Inspec for Image Tests
      #   run: |
      #     curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec -v 5
      #     inspec --chef-license=accept

      # - name: Run Inspec Tests
      #   env:
      #     CHEF_LICENSE: accept
      #   run: |
      #     make test
      #     make cleanup

      # - name: Test Database Tuning Script
      #   run: make test-database-tuning
        
      # - name: Test User Role Setup
      #   run: make test-role-setup

      # - name: Publish Inspec Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
      #   if: always()
      #   with:
      #     check_name: "Inspec Test Results"
      #     files: data-sync-inspec.xml

      - name: configure OIDC AWS credentials for ECR push
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::311462405659:role/sirius-component-ecr-role
          role-session-name: opg-data-sync-github-actions-ecr-push
          role-duration-seconds: 900
          aws-region: eu-west-1

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: 311462405659

      - name: Push & Tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DATA_SYNC_ECR_REPOSITORY: sirius/data-sync
        run: |
          docker tag $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY:latest $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY:${{ needs.create-tag.outputs.tag }}
          if ${{ github.ref_name == 'main' }}
          then
            docker tag $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY:latest $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY:main-${{ needs.create-tag.outputs.tag }}
            docker tag $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY:latest $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY:main-${{ needs.create-tag.outputs.tag }}-${{ needs.create-tag.outputs.timestamp }}
            # We want all of the tags pushed
            docker push --all-tags $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY
          else
            docker push $ECR_REGISTRY/$DATA_SYNC_ECR_REPOSITORY:${{ needs.create-tag.outputs.tag }}
          fi

  end_of_pr_workflow:
    name: End of PR Workflow
    runs-on: ubuntu-latest
    if: always()
    needs:  [create-tag, build, push]
    steps:
      - name: End of PR Workflow
        run: |
          if ${{ contains(needs.*.result,'failure') }}
          then
            echo "Not all checks succedeed, check the previous jobs."
            exit 1
          else
            echo "All checks succedeed!"
            exit 0
          fi

  push-version:
    name: Push Version to Parameter Store & Trigger Deploy
    runs-on: ubuntu-latest
    needs: [create-tag, end_of_pr_workflow]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::997462338508:role/sirius-actions-ci
          role-duration-seconds: 3600
          role-session-name: GitHubActions

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@f5b46b7f32cf5e7ebd652656c5036bf83dd1e60c # 1.0.8

      - name: Push Tag to Parameter Store
        run: |
          aws ssm put-parameter --name "opg-sirius-data-sync-latest-green-build" --type "String" --value "${{ needs.create-tag.outputs.tag }}" --overwrite --region=eu-west-1

      - name: Trigger Dev Deploy
        shell: bash
        run: curl -u ${{ secrets.JENKINS_API_USER }}:${{ secrets.JENKINS_API_TOKEN }} "https://${{ secrets.JENKINS_URL }}/job/Sirius/job/Deploy_to_Development/build?token=${{ secrets.JENKINS_API_TOKEN_NAME }}&cause=Triggered+by+opg-sirius-data-sync"
